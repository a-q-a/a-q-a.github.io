---
layout: "single"
title: "2018-06-19-update"
date: "2018-06-19"
description: "a-q-a 2018-06-19-update"
category: update
tag: a-q-a
---

## Letter
### お通じをよくする単純な選択
- 主食の倍、食物繊維を取る。
  - もしあなたがハンバーガーショップに行ったら、今日限りで「〜バーガーのセット」と注文しなくていい。
    - サラダ二つと、レギューラーバーガーを一つ。
    - これで済む。
  - もしあなたが牛丼屋に行ったら、今日限りで「牛丼並一つ」と注文しなくていい。
    - サラダ二つと、牛丼一番小さいやつを一つ。
    - これで済む。

### 論理的にプログラムを書く方法
- まず最初に右手を上げて祈りを捧げます。（ターミネーター2のあのシーンですね。）
  - 「私は闘いから手を引きます、私は平和的に協力をすることを楽しんでいます。」
  - プログラムを書いて実行するのに、バグやエラーは必ず発生します。
  - そこでいちいち、「くっそーなんでだー」と言っていても、パソコンは私の感情に干渉しない優しさがあります。
  - そう、パソコンは猫に似ていて私を放っておいてくれる尊い存在なのです。
  - 最初に闘わないと決めて、協力的に楽しむことを予言しておくのは、ご飯の時にお箸、スプーン、ナイフを用意するぐらいの慣れた「準備」なのです。
  - このことを自己充足的予言と表現する人もいます。
- エラーは返事
  - 私がプログラムを書いて実行させると、エラーが出ます。
  - それはプログラムからの返事なのです。
  - わざわざ私が書いたコードに不備を指摘してくれる、とても優しくてマメな存在なのです。
  - それを知れば、プログラムに対して感謝の念を感じれるはずです。
  - 最初に祈りを捧げておけば「くっそ！なんで通らない！動かないんだ！」はありません。
  - 「ん？ありがとう！そこによりよくするポイントがあるんだね！わざわざ教えてくれてありがとう！」こうなるのは自然です。
- 成功は静か
  - おそらく、私が何かしら新しいプログラムの言語の学習を始めると最初にやることはHello worldと表示させることでしょう。
  - そして、そこから色々とクラスやインスタンス、メソッドを使って遊んで慣れていきます。
  - エラーのような返答に応え、修正と更新を繰り返します。
  - 大体のプログラム言語では、コードを実行して正常だと、コンソールで何も言わないのです。
  - プログラムは沈黙の祈りを捧げているのです。まるでマザーテレサのようですね。
  - そうです、成功は静かなのです。

### 喉が渇いているなら、水を飲みたい。
- 馬を水飲み場まで引いても、馬が水を飲みたくないなら、馬に水を飲ませることはできない。
- 逆に、喉が渇いてる人は、水の飲み方、水分の重要性なんて説得されたいわけじゃない。
- 喉が渇いてるから飲みたいだけなんだ。

### Init Web Site
#### 気楽に始める気楽に続けるWebサイト運営

##### はじめに
はじめまして、お会いできて嬉しいです。
多分このサイトのタイトルを見てるってことは、このページを見てる人は
Webサイト作りたい、運営したいって想いを形にしたい人だと考えてお話ししたいです。

##### 推定対象
SNSやブログサービスを使ったことがある。
WordPressのようなCMSをかじったことがある。

##### 前提
気楽にWebサイトを作り、継続的に更新したい。
虫のいい話で、すんげー気楽に運営したいって考えをお持ちの方。

サイトを作りたい、運営したい、まだどうしたいかはあいまいな人。

##### 構想
サイトを作りたい、興味がある。
どうしたいかは、あいまいだ。
-> 多目的サイトとして運営してみる。

多目的サイトとして運営しながら、出てきたアイデアや興味のあるテーマは別サイトにする。
-> スケールアウトで広げていく。

正直、超簡単に更新したい。
htmlタグを直書きとかはしたくない。
ログインとかして何か書いたりしたりするのも手間。
正直お金かけたりしたくない。
-> 静的サイトジェネレータ（スタティックサイトジェネレータ）を使用する。

##### 構成の参考にした考え
抽象的
どうしたいのかが明確な場合、それはこのサイトではなくSEOを重視したコンテンツ作成の方法を紹介しているサイトは山ほどあるはずだ。
ただ、抽象的でありながらサイトを運営したいってことはある。
Webアプリのフレームワークを使って何か作りたいけれど、そこまで具体的な何かってことがない。
純粋にサイトを作りたい、作っておきたい。

ミニマリズム
より少ないを余裕のある空間に配置してみよう。
一つのサイトに全てを配置しない。
テーマができたら、それは別のサイトとして表現しよう。

静的サイト
WordPressのようなCMSで動的サイトを運営しようとした場合、金銭面ではサーバ代、ドメイン代の運営費が必要になる。
加えて、PHPやMySQLのセキュリティや使い方についても継続的に学習する必要がある。
静的サイトで、Webサーバだけで構成すればセキュリティや学習する範囲も少なくていい。

##### 運営の例
更新から、拡大の流れ。
静的サイトジェネレータでmdファイルからhtmlを生成。

##### サイトコンテンツの体系化
サイモン・シネック
ゴールデンサークル理論を参考に、why(なぜ)から考える。
次にHow、その次にWhat

##### アウトライン
とにかくテーマについて考え、書いてみる。
書いたあとに、順番、流れを編集する。
アウトライン(目次)はそのあとに勝手にできてくる。

##### サイト構成の再利用
サイトを更新するうちに、"こんなページが欲しいな"は勝手に湧き出てくる。
例えば、このサイトについて、運営情報、プライバシー&ポリシー、等
このようなページは、新たしく別サイトを作る際にそのまま再利用できる。

多目的サイトを更新しながら、オリジナルのサイト構成を定義、編集していく。
これは公開せずにローカルで、スタティックサイトジェネレータを使って確認するレベルにしておく。
サイトのメインコンテンツは空で、再利用した時に使えるファイルだけを配置して確認してみる。

そして、新しいテーマを一つの新しいサイトとして公開する時に、準備しておいたこのサイト構成を利用する。
そうすることで、すぐにメインコンテンツの作成、公開を可能にできる。
スタティックサイトジェネレータを使っているなら、新しくgit initしてcommit
リモートリポジトリを作成し、そこにpush
netlify, github pagesのようなサービスと連携
これで新サイトは、何回でも作成、公開可能だ。

少し具体的な流れのイメージ
多目的サイトを更新->欲しいページの発見->再利用できるページの発見->空サイトを作成(ローカル)
->空サイトに再利用可能ページを配置、ローカルで確認->新サイト作成、公開したいと思えるテーマの発見
->準備しておいた空サイトを複製->新サイトを即作成、公開

##### 多目的サイトの更新
多目的サイトのには、"なんでも公開していい"ことにする。
よく陥りがちな、「論理的に書く」「推敲を重ねる」「音読してチェックしてみる」
などのルールやチェック、テストを省略

なぜなら、静的サイトジェネレータを使っていて、マークダウンファイルを編集したら
git add
git commit
git push
これをすれば、編集したページは更新され、新規作成したページは追加され、公開される。
そしてそれは、atomのようなgit機能をサポートしているエディタを使っていれば、ボタンをクリックするだけで完結できてしまう手軽さがある。



##### GIT

##### bitbucket

##### netlify

##### 静的サイトジェネレータ

## Continue Point

SHUT DOWN
楽しかった♪:smile_cat:
